@using EasyErp.Core.Configuration.Settings
@using EasyErp.Core.Infrastructure
@section SectionTitle
{
    价格管理
}
@{
    ViewBag.Title = "价格管理";
    var defaultGridPageSize = EngineContext.Current.Resolve<AreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<AreaSettings>().GridPageSizes;
}
@Html.AntiForgeryToken()
@using (Html.BeginForm())
{
    @*@Html.HiddenFor(m => m.ProductId, new
    {
        id = "product-id"
    })*@
    <div class="section-header">
        <div class="title">
            <label>价格管理</label>
        </div>
    </div>
    <div>
        <div class="form-group">
             <input id="stores"/>
        </div>

    @*<div class="form-group">
        <input id="products" value="0"/>
    </div>*@
        <div id="product-price-mapping-grid"></div>
    </div>
    <script>
        $(document).ready(function() {
            $("#stores").kendoDropDownList({
                dataTextField: "Name",
                dataValueField: "Id",
                dataSource: {
                    transport: {
                        read: {
                            dataType: "json",
                            type: "POST",
                            url: "/Store/StoreList",
                            data: function() {
                                var data = {};
                                addAntiForgeryToken(data);
                                return data;
                            }
                        }
                    },
                    schema: {
                        data: "Data"
                    },
                    onchange:function() {
                        $("#product-price-mapping-grid").data("kendoGrid").page(1);
                    }
                }
            });
            var storeList = $("#stores").kendoDropDownList();
            storeList.select(0);
            $("#product-price-mapping-grid").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "/Product/PriceList",
                            type: "POST",
                            dataType: "json"
                        },
                        update: {
                            url: "/Product/PriceUpdate",
                            type: "POST",
                            dataType: "json"
                        },
                        parameterMap: function(options, operation) {
                            var data;
                            if (operation === "read") {
                                data = {
                                    storeId: "1",
                                    storeName:"Store1"
                                };
                                addAntiForgeryToken(data);
                                return data;
                            } else if (operation === "update" && options.models) {
                                data = options.models[0];
                                addAntiForgeryToken(data);
                                return data;
                            }
                        }
                    },
                    schema: {
                        model: {
                            id: "ProductId",
                            fields: {
                                StoreId: { editable: false, nullable: false },
                                ProductId: { editable: false, nullable: false },
                                StoreName: { editable: false, nullable: true },
                                ProductName: { editable: false, nullable: true },
                                Cost: { type: "number", validation: { min: 0, required: true } },
                                Price: { type: "number", validation: { min: 0, required: true } }
                            }
                        },
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    pageSize: @(defaultGridPageSize),
                    batch: true,
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [@(gridPageSizes)]
                },
                editable: "popup",
                columns: [
                    { field: "StoreName", title: "店名", width: 50 },
                    { field: "ProductName", title: "产品名", width: 50 },
                    { field: "CostPrice", title: "购进价格", width: 100 },
                    { field: "SalePrice", title: "售价", width: 100 },
                    { command: "edit", title: "&nbsp;", width: "250px" }
                ]
            });

        });
        
    </script>
}